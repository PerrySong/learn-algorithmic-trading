import pandas_datareader.data as pdrimport numpy as npimport datetimeimport copyimport pandas as pd'''Funtions for backtesting: '''def CAGR(DF):    df = DF.copy()    df['mon_ret'] = DF['Adj Close'].pct_change()    df['cum_return'] = (1 + df['mon_ret']).cumprod()     n = len(df) / 12    CAGR = (df['cum_return'][-1]) ** (1 / n) - 1    return CAGR# cagr = CAGR(DF)def volatility(DF):    '''    function to calculate annualized volatility of a trading strategy    Parameters    ----------    DF : TYPE        DESCRIPTION.    Returns    -------    vol : TYPE        DESCRIPTION.    '''    df = DF.copy()    vol = df['mon_ret'].std() * np.sqrt(12)    return vol# rf: risk free returndef sharpe(DF, rf):    '''    Function to calculate sharpe ratio; rf is the risk free rate    Parameters    ----------    DF : TYPE        DESCRIPTION.    rf : TYPE        DESCRIPTION.    Returns    -------    sr : TYPE        DESCRIPTION.    '''    df = DF.copy()    sr = (CAGR(df) - rf) / volatility(df)    return sr# rf = 0.022 # risk free return # sharpe_res = sharpe(ohlcv, rf)def sortino(DF, rf):    '''    Function to calculate sortino ratio    Parameters    ----------    DF : TYPE        DESCRIPTION.    rf : TYPE        DESCRIPTION.    Returns    -------    sr : TYPE        DESCRIPTION.    '''    df = DF.copy()    df['daily_ret'] = DF['Adj Close'].pct_change()    neg_vol = df[df['daily_ret'] < 0]['daily_ret'].std() * np.sqrt(12)     sr = (CAGR(df) - rf) / neg_vol    return sr# sortino_res = sortino(ohlcv, rf)def max_dd(DF):    '''    function to calculate max drawdown    Parameters    ----------    DF : TYPE        DESCRIPTION.    Returns    -------    max_dd : TYPE        DESCRIPTION.    '''    df = DF.copy()    df['cum_return'] = (1 + df['mon_ret']).cumprod()    df['cum_roll_max'] = df['cum_return'].cummax()    df['drawdown'] = df['cum_roll_max'] - df['cum_return']    df['drawdown_pct'] = df['drawdown'] / df['cum_roll_max']    max_dd = df['drawdown'].max()    return max_dd    # max_dd_res = max_dd(ohlcv)# ohlcv['Adj Close'].plot()    def calmar(DF):    '''    This function calculate the Calmar ratio        * Calmar Ratio is the ratio of CAGR and Max drawdown and it's measure of risk adjusted return.    '''    df = DF.copy()     clmr = CAGR(df) / max_dd(df)    return clmr# calmar_res = calmar(ohlcv)tickers = ['TSLA', 'BABA', 'UBER', 'FB', 'APPL', 'MSFT', 'GOOG', 'V', 'NVDA',            'TCEHY', 'DIA', 'NDAQ', 'SPY', 'VOO', 'ABBV', 'T', 'DIS', 'NIO']ohlc_mon = {}attempt = 0drop = []while len(tickers) != 0 and attempt <= 5:    tikers = [j for j in tickers if j not in drop]    for i in range(len(tickers)):        try:            ohlc_mon[tickers[i]] = pdr.get_data_yahoo(tickers[i], datetime.date.today() - datetime.timedelta(1825), datetime.date.today())            ohlc_mon[tickers[i]].dropna(inplace=True)            drop.append(tickers[i])        except:            print(tickers[i], ' : fail to fetch data ... retrying')            continue    attempt += 1    tickers = ohlc_mon.keys()ohlc_dict = copy.deepcopy(ohlc_mon)return_df = pd.DataFrame()for ticker in tickers:    print('calculating monthly return for ', ticker)    ohlc_dict[ticker]['mon_ret'] = ohlc_dict[ticker]['Adj Close'].pct_change()    return_df[ticker] = ohlc_dict[ticker]['mon_ret']        # function to calculate portfolio return iteratively    